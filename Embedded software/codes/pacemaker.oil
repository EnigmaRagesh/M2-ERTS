OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {

    /* This fix the default STACKSIZE of tasks */
    TASK {
        UINT32 STACKSIZE = 300 ;
    } ;

    /* This fix the default STACKSIZE of ISRs */
    ISR {
        UINT32 STACKSIZE = 200 ;
    } ;
};

CPU pacemaker {
	OS config {
		STATUS = EXTENDED;

		BUILD = TRUE {
		TRAMPOLINE_BASE_PATH = "../trampoline";
		APP_SRC = "pacemaker.cpp";
		APP_NAME = "pacemaker_exe";
		CFLAGS = "-O0";
		LDFLAGS = "-Map=pacemaker.map";
		LDFLAGS = "-L/Volumes/coro/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1";
		LDFLAGS = "-L/Volumes/coro/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/lib";
		COMPILER = "arm-none-eabi-gcc";
		ASSEMBLER = "arm-none-eabi-as";
		LINKER = "arm-none-eabi-ld";
		COPIER = "arm-none-eabi-objcopy";
		SYSTEM = PYTHON;
		};
		SYSTEM_CALL = TRUE;
		MEMMAP = TRUE {
		COMPILER = gcc;
		LINKER = gnu_ld { SCRIPT = "script.ld"; };
		ASSEMBLER = gnu_as;
		MEMORY_PROTECTION = FALSE;
		};
	};

	APPMODE stdMode {};


	/* LRI component  */ 
	ALARM tLRIClock{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = lriTask;
			EVENT = tLriElapsed;
		};
		AUTOSTART=FALSE;
	};

	TASK lriTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = asEvent;
		EVENT = vsEvent;
		EVENT = vpEvent;
	};

	
	/* PVARP component  */ 
	ALARM tPVARPClock{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = pvarpTask;
			EVENT = tPvarpElapsed;
		};
		AUTOSTART=FALSE;
	};

	TASK pvarpTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = agetEvent;
		EVENT = vsEvent;
		EVENT = vpEvent;
	};

	/* VRP component  */ 
	ALARM tVRPClock{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = vrpTask;
			EVENT = tVrpElapsed;
		};
		AUTOSTART=FALSE;
	};

	TASK vrpTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = vgetEvent;
		EVENT = vpEvent;
	};

	/* AVI component  */ 
	ALARM tAVIClock{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = aviTask;
			EVENT = tAviElapsed;
		};
		AUTOSTART=FALSE;
	};

	TASK aviTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = asEvent;
		EVENT = apEvent;
		EVENT = vsEvent;
		EVENT = vpEvent;
	};

	/* URI component  */ 
	ALARM clk{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = aviTask;
			EVENT = clkElapsed;
		};
		AUTOSTART=FALSE;
	};

	TASK uriTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = vsEvent;
		EVENT = vpEvent;
	};
	

	/* heart component */
	ALARM heartClock{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = heartTask;
			EVENT = beatEvent;
		};
		AUTOSTART = TRUE{
			APPMODE = stdMode;
			ALARMTIME = 500;
			CYCLETIME = 700;
		};
	};

	TASK heartTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = beatEvent;
	};


	/* blinking leds compenents */
	TASK blinkTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = agetEvent;
		EVENT = vgetEvent;
		EVENT = agetpEvent;
		EVENT = vgetpEvent;
	};

	ALARM turnOffLedClock{
		COUNTER = SystemCounter;
		ACTION = SETEVENT{
			TASK = turnOffLedTask;
			EVENT = turnOffLedEvent;
		};
		AUTOSTART=FALSE;
	};

	TASK turnOffLedTask{
		AUTOSTART=TRUE{
			APPMODE = stdMode;
		};
		PRIORITY = 3;
		SCHEDULE = FULL;
		ACTIVATION = 1;
		EVENT = aonEvent;
		EVENT = vonEvent;
		EVENT = aponEvent;
		EVENT = vponEvent;
	};	


	/* heart events */
	EVENT beatEvent{
		MASK = AUTO;
	};

	EVENT agetEvent{
		MASK = AUTO;
	};
	EVENT vgetEvent{
		MASK = AUTO;
	};
	
	
	/* blinking leds events  */
	EVENT turnOffLedEvent{
		MASK = AUTO;
	};
	EVENT aonEvent{
		MASK = AUTO;
	};
	EVENT vonEvent{
		MASK = AUTO;
	};
	EVENT agetpEvent{
		MASK = AUTO;
	};
	EVENT vgetpEvent{
		MASK = AUTO;
	};
	EVENT aponEvent{
		MASK = AUTO;
	};
	EVENT vponEvent{
		MASK = AUTO;
	};


	/* pacemaker events */
	EVENT asEvent{
		MASK = AUTO;
	};
	EVENT apEvent{
		MASK = AUTO;
	};
	EVENT vsEvent{
		MASK = AUTO;
	};
	EVENT vpEvent{
		MASK = AUTO;
	};
	EVENT arEvent{
		MASK = AUTO;
	};

	/* clock events */
	EVENT tLriElapsed{
		MASK = AUTO;
	};
	EVENT tPvarpElapsed{
		MASK = AUTO;
	};
	EVENT tVrpElapsed{
		MASK = AUTO;
	};
	EVENT tAviElapsed{
		MASK = AUTO;
	};
	EVENT clkElapsed{
		MASK = AUTO;
	};
};

